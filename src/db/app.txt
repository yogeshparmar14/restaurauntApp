https://restaurant-app-yogesh-parmar.herokuapp.com/
{ minDomainSegments: 2, tlds: { allow: ['com', 'net'] } }
mongodb+srv://yogeshparmar:Yogesh1%21%40%23%24%25>@cluster0.mgnye.mongodb.net/?retryWrites=true&w=majority
DATABASE_URL_ATLAS="mongodb+srv://yogeshparmar:Yogesh1%21%40%23%24%25@cluster0.mgnye.mongodb.net/restaurantapp?retryWrites=true&w=majority"

mongodb+srv://yogeshparmar:Yogesh12%0A@cluster0.kvkv0.mongodb.net/?retryWrites=true&w=majority 
return res.send({"message":"Email or Password is not valid", "status":400})

{
    "data": {},
    "error": [
        {
            "message": "Name can only contain alphabets",
            "path": [
                "name"
            ],
            "type": "string.pattern.base",
            "context": {
                "regex": {},
                "value": "de1",
                "label": "name",
                "key": "name"
            }
        }
    ]
}

{
    "data": {},
    "error": {
        "message": "Name can only contain alphabets",
        "path": [
            "name"
        ],
        "type": "string.pattern.base",
        "context": {
            "regex": {},
            "value": "de1",
            "label": "name",
            "key": "name"
        }
    }
}

{
    "data": {},
    "error": {
        "_original": {
            "name": "de1",
            "email": "shadee7we6654@gmail.in",
            "password": "Shaurya1@",
            "termCondition": true,
            "userType": "USER"
        },
        "details": [
            {
                "message": "Name can only contain alphabets",
                "path": [
                    "name"
                ],
                "type": "string.pattern.base",
                "context": {
                    "regex": {},
                    "value": "de1",
                    "label": "name",
                    "key": "name"
                }
            }
        ]
    }
}

.message("the minimum number of string characters required is 3 or more")
.message("Name can only contain alphabets")

{
  data: {}
  error: {
   name: "Name is required",
   password: "Password should contain alphanumaric...."
  }
}


 data: {},
            error:error
            // error:error.details[0].message

            {
                    name: error.details[0].message,
                    password:error.details[0].message
                }

                const fileFilter = (req,file,cb)=>{
    if(file.mimetype.split("/")[0]==="image"){
        cb(null,true)
    }else{
        cb(new multer.MulterError("LIMIT_UNEXPECTED_FILE"),false)
    }
}

const router = express.Router();
const upload = multer({
    storage,
    fileFilter,
    limits:{fileSize:99999999999,files:2}
});

require("dotenv").config();
const aws = require('aws-sdk')
const express = require('express')
const multer = require('multer')
const multerS3 = require('multer-s3')
const uuid = require("uuid").v4;
const router = express.Router();

aws.config.update({
  AWS_ACCESS_KEY_ID:process.env.AWS_ACCESS_KEY_ID,
AWS_SECRET_ACCESS_KEY: process.env.AWS_SECRET_ACCESS_KEY,
AWS_DEFAULT_REGION:process.env.AWS_DEFAULT_REGION
})

const s3 = new aws.S3();

const upload=multer({
  storage:multerS3({
    bucket:process.env.AWS_BUCKET_NAME,
    s3:s3,
    acl:"public-read",
    key: (req, file, cb) => {
      cb(null, `${uuid()}-${file.originalname}`);
    }
  })
})

router.post('/upload',upload.single("avatar"),(req,res)=>{
   console.log(req.file)
  res.send(`sucessfully uploaded at ${req.file.location}` )
})

module.exports = router;
